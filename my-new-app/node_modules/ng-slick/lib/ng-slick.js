'use strict';

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

require('slick-carousel');

require('slick-carousel/slick/slick.css');

require('./ng-slick.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//require('slick-carousel/slick/slick-theme.css');

_angular2.default.module('ngSlick', []).directive('ngSlick', ['$timeout', function (timeout) {
  return {
    scope: {
      ngSlickOptions: '='
    },
    restrict: 'AE',
    link: function link(scope, element, attrs) {
      var lastslide = void 0;
      var parent = scope.$parent;

      var slider = (0, _jquery2.default)(element).addClass('ng-slick').css('opacity', 0).on('init', function (event, slick) {
        var slide = slick.$slides[slick.slickCurrentSlide()];
        if (slide && attrs.zooming === 'true') {
          (0, _jquery2.default)(slide).addClass('slick-slide-zooming');
        }

        if (attrs.ngSlickInit) parent.$eval(attrs.ngSlickInit, { $event: event, $slick: slick });
      }).on('beforeChange', function (event, slick, currentSlide, nextSlide) {
        lastslide = slick.$slides[currentSlide];

        var slide = slick.$slides[nextSlide];
        if (slide && attrs.zooming === 'true') {
          (0, _jquery2.default)(slide).addClass('slick-slide-zooming');
        }

        if (attrs.ngSlickBeforeChange) parent.$eval(attrs.ngSlickBeforeChange, { $event: event, $slick: slick, $currentSlide: currentSlide, $nextSlide: nextSlide });
      }).on('afterChange', function (event, slick, currentSlide) {
        if (lastslide) (0, _jquery2.default)(lastslide).removeClass('slick-slide-zooming');

        if (attrs.ngSlickAfterChange) parent.$eval(attrs.ngSlickAfterChange, { $event: event, $slick: slick, $currentSlide: currentSlide });
      }).on('breakpoint', function (event, slick, breakpoint) {
        if (attrs.ngSlickBreakpoint) parent.$eval(attrs.ngSlickBreakpoint, { $event: event, $slick: slick, $breakpoint: breakpoint });
      }).on('destroy', function (event, slick) {
        if (attrs.ngSlickDestroy) parent.$eval(attrs.ngSlickDestroy, { $event: event, $slick: slick });
      }).on('edge', function (event, slick, direction) {
        if (attrs.ngSlickEdge) parent.$eval(attrs.ngSlickEdge, { $event: event, $slick: slick, $direction: direction });
      }).on('reInit', function (event, slick) {
        if (attrs.ngSlickReInit) parent.$eval(attrs.ngSlickReInit, { $event: event, $slick: slick });
      }).on('setPosition', function (event, slick) {
        if (attrs.ngSlickSetPosition) parent.$eval(attrs.ngSlickSetPosition, { $event: event, $slick: slick });
      }).on('swipe', function (event, slick, direction) {
        if (attrs.ngSlickSwipe) parent.$eval(attrs.ngSlickSwipe, { $event: event, $slick: slick, $direction: direction });
      }).on('lazyLoaded', function (event, slick, image, imageSource) {
        if (attrs.ngSlickLazyLoaded) parent.$eval(attrs.ngSlickLazyLoaded, { $event: event, $slick: slick, $image: image, $src: imageSource, $imageSource: imageSource });
      }).on('lazyLoadError', function (event, slick, image, imageSource) {
        if (attrs.ngSlickLazyLoadError) parent.$eval(attrs.ngSlickLazyLoadError, { $event: event, $slick: slick, $image: image, $src: imageSource, $imageSource: imageSource });
      });

      var buildoptions = function buildoptions() {
        var o = scope.ngSlickOptions || {};

        if ('dots' in attrs) o.dots = attrs.dots !== 'false';
        if ('cssEase' in attrs) o.cssEase = attrs.cssEase;
        if ('fade' in attrs) o.fade = attrs.fade === 'true';
        if ('focusOnSelect' in attrs) o.focusOnSelect = attrs.focusOnSelect;
        if ('lazyLoad' in attrs) o.lazyLoad = attrs.lazyLoad === 'true';
        if ('draggable' in attrs) o.draggable = attrs.draggable !== 'false';
        if ('easing' in attrs) o.easing = attrs.easing;
        if ('centerMode' in attrs) o.centerMode = attrs.centerMode;
        if ('centerPadding' in attrs) o.centerPadding = attrs.centerPadding;
        if ('accessibility' in attrs) o.accessibility = attrs.accessibility !== 'false';
        if ('centerPadding' in attrs) o.centerPadding = attrs.centerPadding;
        if ('adaptiveHeight' in attrs) o.adaptiveHeight = attrs.adaptiveHeight !== 'false';
        if ('arrows' in attrs) o.arrows = attrs.arrows !== 'false';
        if ('pauseOnHover' in attrs) o.pauseOnHover = attrs.pauseOnHover !== 'false';
        if ('responsive' in attrs) o.responsive = attrs.responsive && parent.$eval(attrs.responsive);
        if ('rtl' in attrs) o.rtl = attrs.rtl === 'true';
        if ('touchMove' in attrs) o.touchMove = attrs.touchMove !== 'false';
        if ('touchThreshold' in attrs && +attrs.touchThreshold) o.touchThreshold = +attrs.touchThreshold;
        if ('useCSS' in attrs) o.useCSS = attrs.useCSS !== 'false';
        if ('variableWidth' in attrs) o.variableWidth = attrs.variableWidth !== 'false';
        if ('vertical' in attrs) o.vertical = attrs.vertical !== 'false';
        if ('infinite' in attrs) o.infinite = attrs.infinite !== 'false';
        if ('speed' in attrs && +attrs.speed) o.speed = +attrs.speed;
        if ('slidesToShow' in attrs && +attrs.slidesToShow) o.slidesToShow = +attrs.slidesToShow;
        if ('swipeToSlide' in attrs) o.swipeToSlide = attrs.swipeToSlide !== 'false';
        if ('autoplay' in attrs) o.autoplay = attrs.autoplay !== 'false';
        if ('autoplaySpeed' in attrs && +attrs.autoplaySpeed) o.autoplaySpeed = +attrs.autoplaySpeed;
        if ('zIndex' in attrs && +attrs.zIndex) o.zIndex = +attrs.zIndex;

        return o;
      };

      var init = function init() {
        if (!slider.hasClass('ng-slick-init')) {
          slider.addClass('ng-slick-init').css('opacity', 1).slick(buildoptions()).slick('setPosition').slick('slickGoTo', 0).slick('slickPlay');
        }
      };

      var destroy = function destroy() {
        if (slider.hasClass('ng-slick-init')) slider.removeClass('ng-slick-init').remove('slick-list').slick('unslick');
      };

      var refreshing = false;
      var refresh = function refresh() {
        if (refreshing) return;

        refreshing = true;
        destroy();
        setTimeout(function () {
          refreshing = false;
          init();
        }, 150);
      };

      scope.$on('$destroy', function () {
        return destroy();
      });

      attrs.ngWatch && parent.$watch(attrs.ngWatch, function () {
        return timeout(refresh);
      });

      scope.$watch('ngSlickOptions', function () {
        var o = scope.ngSlickOptions;
        if (o && (typeof o === 'undefined' ? 'undefined' : (0, _typeof3.default)(o)) === 'object') timeout(refresh);
      }, true);

      scope.refresh = element[0].refresh = function () {
        return timeout(refresh);
      };

      return !attrs.ngWatch && timeout(init, 10);
    }
  };
}]);

// ref: http://plnkr.co/edit/WCEWwgNcIEC0rseaZIO6?p=preview
//# sourceMappingURL=data:application/json;charset=utf-8;base64,