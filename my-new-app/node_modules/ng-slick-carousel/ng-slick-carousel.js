"use strict";

angular
  .module("ng-slick-carousel", [])
  .directive('slick', [
    angularSlick
  ])

function angularSlick () {

  return {
    restrict: 'AE',
    scope: {
      initOnload: '@',
      data: '=',
      currentIndex: '=',
      accessibility: '@',
      adaptiveHeight: '@',
      arrows: '@',
      asNavFor: '@',
      appendArrows: '@',
      appendDots: '@',
      autoplay: '@',
      autoplaySpeed: '@',
      centerMode: '@',
      centerPadding: '@',
      cssEase: '@',
      customPaging: '&',
      dots: '@',
      draggable: '@',
      easing: '@',
      fade: '@',
      focusOnSelect: '@',
      infinite: '@',
      initialSlide: '@',
      lazyLoad: '@',
      onBeforeChange: '&',
      onAfterChange: '&',
      onInit: '&',
      onReInit: '&',
      onSetPosition: '&',
      pauseOnHover: '@',
      pauseOnDotsHover: '@',
      responsive: '=',
      rtl: '@',
      slide: '@',
      slidesToShow: '@',
      slidesToScroll: '@',
      speed: '@',
      swipe: '@',
      swipeToSlide: '@',
      touchMove: '@',
      touchThreshold: '@',
      useCSS: '@',
      variableWidth: '@',
      vertical: '@',
      prevArrow: '@',
      nextArrow: '@'
    },
    link: linkAngularSlick,
  }
}


function linkAngularSlick (scope, element, attrs) {

  var isInitialized = false,
    currentIndex = undefined,
    slider = $(element)

  init()

  function init () {

    if (scope.currentIndex != null)
      currentIndex = scope.currentIndex

    slider.on("afterChange", onAfterChange)
    slider.on("init", onInit)

    if (attrs.onReInit)
      slider.on("reInit", onReInit)
    if (attrs.onBeforeChange)
      slider.on("beforeChange", scope.onBeforeChange)
    if (attrs.onSetPosition)
      slider.on("setPosition", scope.onSetPosition)

    slickify()

    return scope.$watch('currentIndex', onCurrentIndexChange)
  }

  function onCurrentIndexChange (a, b) {

    if (currentIndex != null
        && newVal != null
        && newVal !== currentIndex) {
      return slider.slickGoTo(a)
    }
  }

  function onInit (event, slick) {

    if (attrs.onInit)
      scope.onInit({
        event: event,
        slick: slick,
      })
    if (currentIndex != null)
      return slick.slideHandler(currentIndex)
  }

  function onAfterChange (event, slick, currentSlide) {

    scope.$applyAsync(function () {
      if (attrs.onAfterChange)
        scope.onAfterChange({
          event: event,
          slick: slick,
          currentSlide: currentSlide,
        })

      if (currentIndex != null) {
        currentIndex = currentSlide
        scope.currentIndex = currentSlide
      }
    })
  }

  function slickify () {

    slider.slick({
      accessibility: scope.accessibility !== 'false',
      adaptiveHeight: scope.adaptiveHeight === 'true',
      arrows: scope.arrows !== 'false',
      asNavFor: scope.asNavFor
        ? scope.asNavFor
        : void 0,
      appendArrows: scope.appendArrows
        ? $(scope.appendArrows)
        : $(element),
      appendDots: scope.appendDots
        ? $(scope.appendDots)
        : $(element),
      autoplay: scope.autoplay === 'true',
      autoplaySpeed: scope.autoplaySpeed != null
        ? parseInt(scope.autoplaySpeed, 10)
        : 3000,
      centerMode: scope.centerMode === 'true',
      centerPadding: scope.centerPadding || '50px',
      cssEase: scope.cssEase || 'ease',
      customPaging: attrs.customPaging
        ? scope.customPaging
        : void 0,
      dots: scope.dots === 'true',
      draggable: scope.draggable !== 'false',
      easing: scope.easing || 'linear',
      fade: scope.fade === 'true',
      focusOnSelect: scope.focusOnSelect === 'true',
      infinite: scope.infinite !== 'false',
      initialSlide: parseInt(scope.initialSlide) || 0,
      lazyLoad: scope.lazyLoad || 'ondemand',
      pauseOnHover: scope.pauseOnHover !== 'false',
      responsive: scope.responsive || void 0,
      rtl: scope.rtl === 'true',
      slide: scope.slide || 'div',
      slidesToShow: scope.slidesToShow != null
        ? parseInt(scope.slidesToShow, 10)
        : 1,
      slidesToScroll: scope.slidesToScroll != null
        ? parseInt(scope.slidesToScroll, 10)
        : 1,
      speed: scope.speed != null
        ? parseInt(scope.speed, 10)
        : 300,
      swipe: scope.swipe !== 'false',
      swipeToSlide: scope.swipeToSlide === 'true',
      touchMove: scope.touchMove !== 'false',
      touchThreshold: scope.touchThreshold
        ? parseInt(scope.touchThreshold, 10)
        : 5,
      useCSS: scope.useCSS !== 'false',
      variableWidth: scope.variableWidth === 'true',
      vertical: scope.vertical === 'true',
      prevArrow: scope.prevArrow
        ? $(scope.prevArrow)
        : void 0,
      nextArrow: scope.nextArrow
        ? $(scope.nextArrow)
        : void 0
    })
  }

}
